//
//  SearchViewController.swift
//  MySound
//
//  Created by Игорь Ноек on 19.04.2020.
//  Copyright (c) 2020 Игорь Ноек. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchDisplayLogic: class
{
    func displayData(viewModel: Search.Model.ViewModel.ViewModelData)//add
}

class SearchViewController: UIViewController, SearchDisplayLogic
{
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic)?


    @IBOutlet weak var table: UITableView!


    private var timer: Timer?
    private var searchController = UISearchController(searchResultsController: nil)
    private var searchViewModel = SearchViewModel.init(cells: [])

    // MARK: Object lifecycle

    //deleted inits

    // MARK: Setup

    private func setup()
    {
        let viewController = self
        let interactor = SearchInteractor()
        let presenter = SearchPresenter()
        let router = SearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
    }



    //    // MARK: Routing
    //
    //    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    //    {
    //        if let scene = segue.identifier {
    //            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
    //            if let router = router, router.responds(to: selector) {
    //                router.perform(selector, with: segue)
    //            }
    //        }
    //    }

    // MARK: View lifecycle

    override func viewDidLoad()
    {
        super.viewDidLoad()
        setup()
        setupTableView()
        setupSearchBar()
    }

    private func setupSearchBar() {
        navigationItem.searchController = searchController
        searchController.searchBar.delegate = self

    }

    private func setupTableView() {
        table.register(UITableViewCell.self, forCellReuseIdentifier: "cell")
    }

    func displayData(viewModel: Search.Model.ViewModel.ViewModelData) {

        switch viewModel {

        case .displayTracks(let searchViewModel):
            //локальная переменная получает полученные данные
            self.searchViewModel = searchViewModel
            table.reloadData()
        }
    }


}

// MARK: - UITableViewDelegate, UITableViewDataSource

extension SearchViewController: UITableViewDelegate, UITableViewDataSource {

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {

        return self.searchViewModel.cells.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = table.dequeueReusableCell(withIdentifier: "cell", for: indexPath)

        let track = self.searchViewModel.cells[indexPath.row]

        cell.textLabel?.text = "\(track.artistName)\n\(track.trackName)"
        cell.textLabel?.numberOfLines = 2
        cell.imageView?.image = #imageLiteral(resourceName: "Image")

        return cell
    }



    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {

        return 70
    }
}

extension SearchViewController: UISearchBarDelegate {

    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {

        //отправляем запрос в Interactor при вводе текста в поисковую строку
        timer?.invalidate()
        timer = Timer.scheduledTimer(withTimeInterval: 0.5, repeats: false, block: { (_) in
            self.interactor?.makeRequest(request: Search.Model.Request.RequestType.getTracks(searchTerm: searchText))
        })
    }
}


